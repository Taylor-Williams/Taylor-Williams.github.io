---
layout: post
title:      "Creating and playing with my first ruby gem"
date:       2018-06-28 03:35:06 +0000
permalink:  creating_and_playing_with_my_first_ruby_gem
---


I am confident in my ruby skills and my understanding of how objects interact so I felt like I'd breeze through making my first gem. I think saying that I was horribly wrong would be an understatement.

When I'm given a problem to solve and everything is pre-structured it's easy to feel all-knowing. When given a blank slate, though, you start to realize your gaps in knowledge. Really fast. One of the first things I had trouble with was making sure all the files got all the right dependencies. What do i need to require? When do i need it? What's the syntax? Well, lets try to do it on our own first. Okay I didn't get very far, what do other people do? Hm, seems like there's a couple of different ways that the community resolves its dependencies. Alright, for now lets just copy one that is the most readable to me and we can come back to it.

Okay next up is "what can i do that's cool with a CLI that requires scraping?". Well there's tons of websites that provide tables of information but I want something that I'm interested in and I want it to be something that could potentially be *useful*. I was watching a golf tournament as I was mulling over what I wanted to make and I saw the broadcast was *loaded* with stats. Current standings of the players for this tournament, current world rankings of each player, number of tournament wins per player, difficulties of each hole in comparison to others on the course... everywhere. Every thing that could possibly be tracked was being tracked and it was on display at times that it was pertinent. My decision was made for me, I'll just scrape all the information that i can from the PGA tour website!

I built a basic CLI to see what i expected to be able to pull and give to any user of my gem. next I went to pgatour.com and scanned the layout to see how to structure my scraping. piece of cake, they have a list of seasons dating back for decades and each tournament has a date, name, bunch of simple attributes, and a link for more specific info. So lets make a simple Season object that holds all the Tournaments for a year, and each Tournament holds two Dates and a bunch of other attributes. I don't know how to make or use Dates. fine, lets read through Date documentation and figure out how to use them. Perfect, this is so easy!

Queue many hours of working out how to scrape the basic attributes, not being able to get the pgatour website to reliably present other seasons, working out how to parse the information that i've scraped, regex-ing user input, zipping together the information that I've scraped, etc. Oh -- maybe this isn't so easy. Each time you step a little further into bug fixing you realize that your code is less managable in its current form so you think about what object is responsible for what jobs, and what's the best way to group jobs together? Should it be a class or a module? How dynamic should i make my code?!? I know what I want to implement in the distant future but it's a pain in the butt to try to build my code now to fit what i want to be able to produce in the future.

Each time you get these questions there's a part of you that wants to sit down and think it all out but you can't do it very well until you see how everthing fits together. Sometimes you are certain of one organization but after you make it all work you find yourself preferring another system.

This all is a bunch of rambling but the point that I wanted to make was that working through these on your own gives you an appreciation for the complexity for all these parts. I have a pretty simple gem that just prints out all the tournaments for the current PGA tour season, and keeps a couple bits of information about each tournament that the user can request. In the grand scheme of things it doesn't do much. I can imagine how I would implement it further and start getting it to hold player information, reach back into past seasons, start to organize tournaments by more interesting metrics, and so on. But until you work on doing it you can't get a feel for how hard it is to combine all of the moving parts that are required. The satisfaction that you get from making something that works, however, is immense. When all your objects start working together and you're able to add a new method or two and it works seamlessly with the other parts it's tremendously satisfying. 
